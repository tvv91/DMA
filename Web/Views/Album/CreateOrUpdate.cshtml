@model AlbumDataRequest;

<script>
    
    $(document).ready(async () => {
        await start();
    });

    connection.onclose(async () => {
        await start();
    });
    
    $(() => {
        $("input[id$='_input']").on("input", (e) => {
            $("input[id$='_input']").autocomplete({
                source: `/search/${e.target.id.replace("_input", "")}?value=${e.target.value}`,
                messages: {
                        noResults: '',
                        results: () => {}
                        },
                select: function(event, sender) {
                    getManufacturer(event.target.id.replace("_input", ""), sender.item.value);
                }
            });
        });
    });
    
    async function getManufacturer(category, value) {
        try {
            await connection.invoke("GetManufacturer", connection.connectionId, category, value);
        } catch (err) {
            console.log("Error sending request to GetManufacturer");
        }
    }    
    
    /* 
    Show some bootstrap alerts. Alerts using for additional validation
    Alert level defines css style of alert (danger, warning, etc.)
    */
    function showAlert(alertId, alertLevel, message) {
        // remove all previous style classes
        $(`#${alertId}`).removeClass("alert-success alert-warning alert-danger ");
        // remove fa icon
        $(`#${alertId} i`).removeClass();
        
        // set alert title and icon according to alert level (TODO: make more generic?)
        switch (alertLevel) {
            case "alert-success":
                $(`#${alertId} strong`).text("OK");
                $(`#${alertId} i`).addClass("fa-solid fa-circle-check");
            break;
            case "alert-warning":
                $(`#${alertId} strong`).text("WARNING");
                $(`#${alertId} i`).addClass("fa-solid fa-circle-exclamation");
            break;
            case "alert-danger":
                $(`#${alertId} strong`).text("ATTENTION");
                $(`#${alertId} i`).addClass("fa-solid fa-triangle-exclamation");
            break;

        }
        
        // clean previous message
        $(`#${alertId} div`).empty().append(message);
        // show alert
        $(`#${alertId}`).addClass(`${alertLevel} show`).alert();
    }

    function onSubmit() {
        let value = $("#sizeinput").val();
        
        if (value.includes(".")) {
            $("#sizeinput:text").val(value.replace(/\./g, ','));
        }
        
        switch ($("#action").val()) {
            case "newalbum":
                sessionStorage.setItem("albumcreated", "1");
                break;
            case "update":
                sessionStorage.setItem("albumupdated", "1");
                break;
        }
    }

    /*
    Some checks for prevention to save incorrect data
    for example, if you select any DSD format as digital format
    and bitness more than 1, which impossible
    */
    function checkValidData() {
        const dsdformats = ["dsd64", "dsd128", "dsd256", "dsd512"];
        let codec = $("#digitalformat_input").val().toLowerCase();
        let bitness = $("#bitness_input").val();
        let sampling = $("#sampling_input").val();

        if (codec !== "" && bitness !== "" && sampling !== "") {
            if (dsdformats.some(x => codec.includes(x))) {
                if (bitness !== "1") {
                    showAlert("digitization_warning", "alert-warning", "DSD is 1 bit/s format");
                }
                else if (codec == 'dsd64' && (sampling !== "2.8" && sampling !== "2,8")) {
                    showAlert("digitization_warning", "alert-warning",  "DSD64 sampling is 2.8 (MHz)");
                }
                else if (codec == 'dsd128' && sampling !== "5.6" && sampling !== "5,6") {
                    showAlert("digitization_warning", "alert-warning", "DSD128 sampling is 5.6 (MHz)");
                }
                else if (codec == 'dsd256' && sampling !== "11.2" && sampling !== "11,2") {
                    showAlert("digitization_warning", "alert-warning", "DSD256 sampling is 11.2 (MHz)");
                }
                else if (codec == 'dsd512' && sampling !== "22.5" && sampling !== "22,5") {
                    showAlert("digitization_warning", "alert-warning", "DSD512 sampling is 22.5 (MHz)");
                } else {
                    $("#digitization_warning").removeClass("show");
                }
            }
        }
    }

    /*
    Check if album that you want to add is already present in db
    You can store many samy albums but for example, digitized by
    different hardware or different releases, etc. So, we should to know
    if album present. So we should inform by very simple coincidences
    (just album title and artist) and more specific (album, artist, storage, source, hardware etc.)
    */
    function checkAlbumIsExists() {
        let artist = $("#artist_input").val();
        let album = $("#album").val();

        if (artist !== '' && album !== '') {
            let source = $("#source").val();
            checkAlbum(album, artist, source);
        }
    }

    async function checkAlbum(artist, album, source) {
        try {
            await connection.invoke("CheckAlbum", connection.connectionId, artist, album, source);
        } catch (err) {
            console.log("Error sending request to GetManufacturer");
        }
    }

    function prepareAlbumLinks(albumIds) {
        let markup = '';
        if (albumIds.length > 0) {
            albumIds.forEach(id => markup += `&nbsp<a href="/album/${id}" target="_blank">${id}</a>&nbsp`)
        }
        return markup;
    }

    connection.on("ReceivedManufacturer", (category, result) => {
         $(`input[id$='${category}_manufacturer_input']`).val(result);
    });

    connection.on("AlbumIsExist", (factor, albumIds) => { 
        switch (factor) {
             case 0:
                showAlert("album-alert", "alert-success", "Similar albums / duplicates not found. The album will be added for the first time.");
                break;
             case 50:
                showAlert("album-alert", "alert-warning", `Next album(s) [${prepareAlbumLinks(albumIds)}] already exists, Probably, digitized by another hardware.`);
             break;
             case 100: 
                showAlert("album-alert", "alert-danger", `Next album(s) [${prepareAlbumLinks(albumIds)}] already exists with such source. Please, check for be sure that it's not duplication.`);
             break;
         }
    });

</script>

<a class="btn btn-secondary mt-3" asp-action="index" asp-controller="album">Back</a>
<form asp-action="@Model.Action" method="post" onsubmit="onSubmit()">
    <div asp-validation-summary="ModelOnly"></div>
    <input type="hidden" id="coverid" asp-for="AlbumCover" />
    <input type="hidden" id="albumid" asp-for="AlbumId" />
    <input type="hidden" id="action" asp-for="Action" />
    <div class="new-update-album">
        <div class="cover-image">
            <div class="image-place justifiy-element-size dropzone" id="mydropzone"></div>
        </div>
        <div class="album-main-info">
            <div class="album-form-input">
                <input id="artist_input" class="input-textbox" asp-for="Artist" autocomplete="on" placeholder="Artist" onchange="checkAlbumIsExists()" />
                <input id="album" class="input-textbox" asp-for="Album" placeholder="Album" onchange="checkAlbumIsExists()" />
                <input id="genre_input" class="input-textbox" asp-for="Genre" autocomplete="on" placeholder="Genre" />
                <input id="year_input" class="input-textbox" asp-for="Year" autocomplete="on" placeholder="Year"/>
                <input id="reissue_input" class="input-textbox" asp-for="Reissue" placeholder="Reissue" />
                <input class="input-textbox" asp-for="Country" placeholder="Country"/>
                <input class="input-textbox" asp-for="Label" placeholder="Label"/>
                <input id="source" class="input-textbox" asp-for="Source" placeholder="Source" onchange="checkAlbumIsExists()" />
                <input class="input-textbox" asp-for="Discogs" placeholder="Discogs"/>
                <input id="sizeinput" class="input-textbox" asp-for="Size" placeholder="Size(Gb)"/>
                <input class="input-textbox" asp-for="Storage" placeholder="Storage" />
            </div>
            <div id="album-alert" class="alert alert-danger alert-dismissible fade" role="alert">
                <i>&nbsp</i>
                <strong></strong>
                <div></div>
            </div>
        </div>
        <div class="tech-info-wrapper">
            <div class="tech-info-digitization">
                <h4 style="text-align:center">Digitization</h4>
                <hr />
                <div class="album-form-input">
                    <input id="vinylstate_input" class="input-textbox" asp-for="VinylState" autocomplete="on" placeholder="Vinyl state"/>
                    <input id="digitalformat_input" class="input-textbox" asp-for="DigitalFormat" placeholder="Digital format" autocomplete="on" onchange="checkValidData()" />
                    <input id="bitness_input" class="input-textbox" asp-for="Bitness" onchange="checkValidData()" placeholder="Bitness" />
                    <input id="sampling_input" class="input-textbox" asp-for="Sampling" onchange="checkValidData()" placeholder="Sampling" />
                    <input id="sourceformat_input" class="input-textbox" asp-for="SourceFormat" placeholder="Source format" />
                </div>
                <div id="digitization_warning" class="alert alert-danger alert-dismissible fade" role="alert">
                    <i id="alert-icon" class="">&nbsp</i>
                    <strong></strong>
                    <div></div>
                </div>
            </div>
            <div class="tech-info-hardware">
                <h4 style="text-align:center">Hardware</h4>
                <hr />
                <div class="album-form-input">
                    <input id="player_input" class="input-textbox" asp-for="Player" placeholder="Player" />
                    <input id="player_manufacturer_input" class="input-textbox" asp-for="PlayerManufacturer" placeholder="Manufacturer" />
                    <input id="cartridge_input" class="input-textbox" asp-for="Cartridge" placeholder="Cartridge" />
                    <input id="cartridge_manufacturer_input" class="input-textbox" asp-for="CartridgeManufacturer" placeholder="Manufacturer" />
                    <input id="amp_input" class="input-textbox" asp-for="Amplifier" placeholder="Amplifier" />
                    <input id="amp_manufacturer_input" class="input-textbox" asp-for="AmplifierManufacturer" placeholder="Manufacturer" />
                    <input id="adc_input" class="input-textbox" asp-for="Adc" placeholder="Adc" />
                    <input id="adc_manufacturer_input" class="input-textbox" asp-for="AdcManufacturer" placeholder="Manufacturer" />
                    <input id="wire_input" class="input-textbox" asp-for="Wire" placeholder="Wire" />                    
                    <input id="wire_manufacturer_input" class="input-textbox" asp-for="WireManufacturer" placeholder="Manufacturer" />
                </div>
            </div>
        </div>
    </div>
    <button id="submit_button" type="submit" style="float:right;" class="mt-2">
        <i class="fa-sharp fa-solid fa-check"></i>
        Save
    </button>
</form>

<script>
    Dropzone.autoDiscover = false;
    let myDropzone = new Dropzone("div#mydropzone", 
    {
        url: "/UploadCover",
        addRemoveLinks: true,
        thumbnailWidth: 300,
        thumbnailHeight: 300,
        resizeWidth: 300,
        resizeHeight: 300,
        dictDefaultMessage: "<b>Upload album cover</b><br><i>Images > 300x300 pixels will be resized</i>",
        acceptedFiles: ".jpeg,.png,.jpg",
            success: (file, data) => {
                $("#coverid").val(data.filename);
                let preview = $(file.previewElement);
                preview.addClass("dz-success text-success");
            },
            init: function() {
                const coverId = $("#coverid").val();
                if (coverId !== "") {
                    let myDropzone = this;
                    let coverUrl = window.location.href.includes("edit") ? coverId : `/temp/${coverId}`;
                    myDropzone.displayExistingFile({}, coverUrl);
                }
            },
            removedfile: function(file) {
                $("#coverid").val("");
                if (file.previewElement != null && file.previewElement.parentNode != null) {
                    file.previewElement.parentNode.removeChild(file.previewElement);
                }
                return this._updateMaxFilesReachedClass();
            }
    });
</script>