@model EquipmentDataRequest;
<script>
    
    $(document).ready(async () => {
        await start();

        /*
            Disable ability to change entity type during updating.

            This follows from the fact that each entity corresponds to a separate table in the database. 
            Suppose we have Adc and Cartridge with Id=1. What if we change the type of Adc to Cartridge? 
            We can't There are several options. We can't keep two entities with the same PK.

        1. Have one Entities table but with different EntityTypeId, then we can change only EntityTypeId, 
        but this will create other problems. What if over time we go to augment some entity with additional fields? 
        In that case that field will be needed for all the others unnecessarily.
        
        2. When changing the type, delete the original entity and create a new one corresponding 
        to the type. But I don't like this option. But here is another problem - 
        if an entity has been bound to some TechnicalInfo record what to do in this case?
        */
        if ("@Model.Action" === "Update") {
            $(".form-select").attr("disabled", true);
        }
    });

    connection.onclose(async () => {
        await start();
    });
    

</script>

<a class="btn btn-secondary mt-3" asp-action="index" asp-controller="equipment">Back</a>
<form asp-action="@Model.Action" method="post" onsubmit="onSubmit()">
    <div asp-validation-summary="ModelOnly"></div>
    <input type="hidden" id="coverid" asp-for="EquipmentCover" />
    <input type="hidden" id="albumid" asp-for="EquipmentId" />
    <input type="hidden" id="action" asp-for="Action" />
    <input type="hidden" id="entitytype" asp-for="EntityType" />
    <div class="new-update-equipment">
        <div class="cover-image">
            <div class="image-place justifiy-element-size dropzone" id="mydropzone"></div>
        </div>
        <div class="equipment-info">
            <div class="equipment-form-input">
                <div class="equipment-select">
                    <select class="form-select" asp-for="EntityType">
                        <option value="Adc">Adc</option>
                        <option value="Amplifier">Amplifier</option>
                        <option value="Cartridge">Cartridge </option>
                        <option value="Player">Player </option>
                        <option value="Wire">Wire </option>
                    </select>
                </div>
                <input id="artist_input" class="input-textbox" asp-for="Model" autocomplete="on" placeholder="Model" onchange="checkAlbumIsExists()" />
                <input id="album" class="input-textbox" asp-for="Manufacturer" placeholder="Manufacturer" onchange="checkAlbumIsExists()" />
                <textarea id="description" class="equipment-textarea" asp-for="Description" type="text" placeholder="Description"></textarea>
            </div>
        </div>
    </div>
    <button id="submit_button" type="submit" style="float:right;" class="mt-2">
        <i class="fa-sharp fa-solid fa-check"></i>
        Save
    </button>
</form>

<script>
    Dropzone.autoDiscover = false;
    let myDropzone = new Dropzone("div#mydropzone", 
    {
        url: "/uploadimage",
        addRemoveLinks: true,
        thumbnailWidth: 300,
        thumbnailHeight: 300,
        resizeWidth: 300,
        resizeHeight: 300,
        dictDefaultMessage: "<b>Upload image</b><br><i>Images > 300x300 pixels will be resized</i>",
        acceptedFiles: ".jpeg,.png,.jpg",
            success: (file, data) => {
                $("#coverid").val(data.filename);
                let preview = $(file.previewElement);
                preview.addClass("dz-success text-success");
            },
            init: function() {
                const coverId = $("#coverid").val();
                if (coverId !== "") {
                    let myDropzone = this;
                    let coverUrl = window.location.href.includes("edit") ? coverId : `/temp/${coverId}`;
                    myDropzone.displayExistingFile({}, coverUrl);
                }
            },
            removedfile: function(file) {
                $("#coverid").val("");
                if (file.previewElement != null && file.previewElement.parentNode != null) {
                    file.previewElement.parentNode.removeChild(file.previewElement);
                }
                return this._updateMaxFilesReachedClass();
            }
    });
</script>